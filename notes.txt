/* New function syntax
 * 
 * main :: (args: char[][]) int { ... };
 *
 * The double semicolon means constant assignment, and we need the semicolon at the end because it is a statement.
 * There are ways to hack around this, but I think just having it is more elegant.
 *
 */

/* Ideas for Tom
 *
 *
 * If forward declarations do not exist:
 *
 * Pass 1: Parse the source file and put its declarations into a table.
 * 
 * Pass 2: Loop through the complex types in the table and attach type information to their members.
            Complex types have a flag with 3 states, TYPE_INFO_MISSING, TYPE_INFO_CALCULATING, TYPE_INFO_PRESENT.
            When you are matching the members of a complex type, you set the flag from TYPE_INFO_MISSING to TYPE_INFO_CALCULATING.
            If a member type is a primitive type, then give it that type.
            If a member type is a complex type (identifier, array, pointers(?)) then look it up.
            If the looked-up type flag is TYPE_INFO_MISSING, recurse and attach type info to it.
            If the looked-up type flag is TYPE_INFO_CALCULATING:
                If it is not behind a pointer or array, then it is a circular type reference and that is an error.
                If the type is, then get its type id. This implies that when a type is resolving its members it has already been added to the list of types.
            If the looked-up type flag is TYPE_INFO_PRESENT, then continue.

 * Pass 3: Give functions and globals type information.
 *
 * Pass 4: Typecheck the bodies of functions.
 *
 *
 *
 * --------------------------------------------------
 *
 * If forward declarations exist:
 *
 * func : (int) void;
 *
 * func :: (i: int) void { };
 *
 * What forward declarations could look like
 *
 * 
 *
 *
 * Struct1 struct;
 *
 * Struct2 struct {
 *     i: int;
 *     j: Struct1;
 * };
 *
 * Struct1 struct {
 *     i: int;
 *     j: Struct2;
 * };
 *
 *  
 *
 * You would have to recursively check the members of Struct1 to make sure they do not directly reference Struct1.
 * Potentially less efficient than doing the algorithm described in Pass 2, but much simpler.
 *
 * Functions:
 *  
 * If you try to reference the members of a struct that is declared but not defined, then that is a compile error, and that's ok.
 * Having forward declarations implies you can do typechecking and code output while you are parsing.
 * This adds complexity to the parser and couples the code.
 */



// Ideas for Grace
// What translation to C might look like

// Creed code 

println :: (string: []char) void {
    putchar: (char) void : extern;
    for c in string {
        putchar(c);
    }
};

main :: (args: [][]char) void {
    for arg in args {
        println(arg);
    }
};


// C output

typedef unsigned long long uint64;


struct Array_char;
typedef struct Array_char Array_char;

struct Array_Array_char;
typedef struct Array_Array_char Array_Array_char;

struct Array_char {
    uint64 count;
    char *data;
}

struct Array_Array_char {
    uint64 count;
    struct Array_char data;
}

void v_println(Array_char string) {
    for (uint64 i = 0ul, i < string.count; i++) {
        putchar(string.data[i]);
    }
}

void v_main(Array_Array_char args) {
    for (uint64 i = 0ul, i < args.count; i++) {
        Array_char arg = args.data[i];
        v_println(arg);
    }
}


/* Ideas for Berk
 * What type inference might look like
 * 
 * i: int;
 * i: int = 1;
 *
 * For now I am going to keep type inference but only for constants like we discussed.
 * j :: "bruh";
 *
 * That means the following is illegal:
 * i := 1; // Implies existance of type inference for non-constants.
