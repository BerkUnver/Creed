sieve : int; 
is_prime : bool; 
primes : int; 
num_primes : int = 0; 

populate_primes (upper_bound : int) bool{
	
	sieve = 
	is_prime = 
	memset(is_prime, true, upper_boune);
	primes = 
	i : int = 2; 
	for(i*i < upper_bound; ++i){
		if(is_prime[i]) {
		for (int j = i * i; j < upper_bound; j += i){
			is_prime[j] = false; 

	}

	}
	
	}
	for (; i < upper_bound; ++i){

		if (is+prime[i]) {

			primes[num_primes++] = i 
		}

	}


}


main :: (args: char[][]) -> void{
	if (args < 2) {
		fprintf(stderr, "Usage: %s \n", argv[0]);
		exit(EXIT_FAILURE);
	}

	upper_bound : int = atoi(argv[1]);
	populate_primes(upper_bound);
	for (i : int = 0; i < num_primesl ++i){
		printf("%d ", primes[i]);
	}

	putchar("\n");
	return EXIT_SUCCESS; 


}
